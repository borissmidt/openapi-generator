/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.User
import org.openapitools.client.core.JsonSupport._
import sttp.tapir._
import sttp.tapir.EndpointIO.annotations._
import sttp.model._

object UserApi {
  val baseUrl: String = "http://petstore.swagger.io/v2"
  /**
   * This can only be done by the logged in user.
   * 
   * Expected answers:
   *   code 0 :  (successful operation)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param user Created user object
   */

  @endpointInput("/user")
  case class CreateUserInput (
    @jsonbody user: User,
  )

  object CreateUserInput{
    val endpointInput: EndpointInput[CreateUserInput] = EndpointInput.derived
  }


  object CreateUserOutput{
    val endpointOutput: EndpointOutput[CreateUserOutput] = EndpointOutput.derived
  }

  val createUser = endpoint
      .method(Method.POST)
      .in(CreateUserInput.endpointInput)
      .out(CreateUserOutput.endpointOutput)

  /**
   * Expected answers:
   *   code 0 :  (successful operation)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param user List of user object
   */

  @endpointInput("/user/createWithArray")
  case class CreateUsersWithArrayInputInput (
    @jsonbody user: Seq[User],
  )

  object CreateUsersWithArrayInputInput{
    val endpointInput: EndpointInput[CreateUsersWithArrayInputInput] = EndpointInput.derived
  }


  object CreateUsersWithArrayInputOutput{
    val endpointOutput: EndpointOutput[CreateUsersWithArrayInputOutput] = EndpointOutput.derived
  }

  val createUsersWithArrayInput = endpoint
      .method(Method.POST)
      .in(CreateUsersWithArrayInputInput.endpointInput)
      .out(CreateUsersWithArrayInputOutput.endpointOutput)

  /**
   * Expected answers:
   *   code 0 :  (successful operation)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param user List of user object
   */

  @endpointInput("/user/createWithList")
  case class CreateUsersWithListInputInput (
    @jsonbody user: Seq[User],
  )

  object CreateUsersWithListInputInput{
    val endpointInput: EndpointInput[CreateUsersWithListInputInput] = EndpointInput.derived
  }


  object CreateUsersWithListInputOutput{
    val endpointOutput: EndpointOutput[CreateUsersWithListInputOutput] = EndpointOutput.derived
  }

  val createUsersWithListInput = endpoint
      .method(Method.POST)
      .in(CreateUsersWithListInputInput.endpointInput)
      .out(CreateUsersWithListInputOutput.endpointOutput)

  /**
   * This can only be done by the logged in user.
   * 
   * Expected answers:
   *   code 400 :  (Invalid username supplied)
   *   code 404 :  (User not found)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param username The name that needs to be deleted
   */

  @endpointInput("/user/{username}")
  case class DeleteUserInput (
    @path username: String,
  )

  object DeleteUserInput{
    val endpointInput: EndpointInput[DeleteUserInput] = EndpointInput.derived
  }


  object DeleteUserOutput{
    val endpointOutput: EndpointOutput[DeleteUserOutput] = EndpointOutput.derived
  }

  val deleteUser = endpoint
      .method(Method.DELETE)
      .in(DeleteUserInput.endpointInput)
      .out(DeleteUserOutput.endpointOutput)

  /**
   * Expected answers:
   *   code 200 : User (successful operation)
   *   code 400 :  (Invalid username supplied)
   *   code 404 :  (User not found)
   * 
   * @param username The name that needs to be fetched. Use user1 for testing.
   */

  @endpointInput("/user/{username}")
  case class GetUserByNameInput (
    @path username: String,
  )

  object GetUserByNameInput{
    val endpointInput: EndpointInput[GetUserByNameInput] = EndpointInput.derived
  }

  case class GetUserByNameOutput (
    @jsonbody body : Option[User],
  )

  object GetUserByNameOutput{
    val endpointOutput: EndpointOutput[GetUserByNameOutput] = EndpointOutput.derived
  }

  val getUserByName = endpoint
      .method(Method.GET)
      .in(GetUserByNameInput.endpointInput)
      .out(GetUserByNameOutput.endpointOutput)

  /**
   * Expected answers:
   *   code 200 : String (successful operation)
   *              Headers :
   *                Set-Cookie - Cookie authentication key for use with the `api_key` apiKey authentication.
   *                X-Rate-Limit - calls per hour allowed by the user
   *                X-Expires-After - date in UTC when token expires
   *   code 400 :  (Invalid username/password supplied)
   * 
   * @param username The user name for login
   * @param password The password for login in clear text
   */

  @endpointInput("/user/login")
  case class LoginUserInput (
    @query username: String,
    @query password: String,
  )

  object LoginUserInput{
    val endpointInput: EndpointInput[LoginUserInput] = EndpointInput.derived
  }

  case class LoginUserOutput (
    @header : Option[String],
    @header : Option[Int],
    @header : Option[OffsetDateTime],
    @jsonbody body : Option[String],
  )

  object LoginUserOutput{
    val endpointOutput: EndpointOutput[LoginUserOutput] = EndpointOutput.derived
  }

  val loginUser = endpoint
      .method(Method.GET)
      .in(LoginUserInput.endpointInput)
      .out(LoginUserOutput.endpointOutput)

  /**
   * Expected answers:
   *   code 0 :  (successful operation)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   */

  @endpointInput("/user/logout")
  case class LogoutUserInput (
  )

  object LogoutUserInput{
    val endpointInput: EndpointInput[LogoutUserInput] = EndpointInput.derived
  }


  object LogoutUserOutput{
    val endpointOutput: EndpointOutput[LogoutUserOutput] = EndpointOutput.derived
  }

  val logoutUser = endpoint
      .method(Method.GET)
      .in(LogoutUserInput.endpointInput)
      .out(LogoutUserOutput.endpointOutput)

  /**
   * This can only be done by the logged in user.
   * 
   * Expected answers:
   *   code 400 :  (Invalid user supplied)
   *   code 404 :  (User not found)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param username name that need to be deleted
   * @param user Updated user object
   */

  @endpointInput("/user/{username}")
  case class UpdateUserInput (
    @path username: String,
    @jsonbody user: User,
  )

  object UpdateUserInput{
    val endpointInput: EndpointInput[UpdateUserInput] = EndpointInput.derived
  }


  object UpdateUserOutput{
    val endpointOutput: EndpointOutput[UpdateUserOutput] = EndpointOutput.derived
  }

  val updateUser = endpoint
      .method(Method.PUT)
      .in(UpdateUserInput.endpointInput)
      .out(UpdateUserOutput.endpointOutput)

}
