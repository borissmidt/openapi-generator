/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.http4s.HttpRoutes
import org.openapitools.client.model.Order
import org.openapitools.client.core.JsonSupport._
import sttp.tapir._
import sttp.tapir.EndpointIO.annotations._
import sttp.model._

import scala.deprecated
import sttp.client3.SttpBackend
import sttp.tapir.client.sttp.SttpClientInterpreter
import sttp.tapir.server.ServerEndpoint
import sttp.tapir.server.http4s.Http4sServerInterpreter

trait StoreApi[F[_]] {
  import StoreApi._
  def deleteOrder(input: DeleteOrderInput): F[Either[Unit,DeleteOrderOutput]]
  def getInventory(input: GetInventoryInput): F[Either[Unit,GetInventoryOutput]]
  def getOrderById(input: GetOrderByIdInput): F[Either[Unit,GetOrderByIdOutput]]
  def placeOrder(input: PlaceOrderInput): F[Either[Unit,PlaceOrderOutput]]
}

object StoreApi {
  val baseUrl: String = "http://petstore.swagger.io/v2"
  @endpointInput("/store/order/{orderId}")
  case class DeleteOrderInput (
     @path orderId: String
  )

  object DeleteOrderInput{
    val endpointInput: EndpointInput[DeleteOrderInput] = EndpointInput.derived
  }

  case class DeleteOrderOutput()
  object DeleteOrderOutput{
    val endpointOutput: EndpointOutput[DeleteOrderOutput] = EndpointOutput.derived
  }

  /**
   *       For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
   * 
   * Expected answers:
   *   code 400 :  (Invalid ID supplied)
   *   code 404 :  (Order not found)
   * 
   * @param orderId ID of the order that needs to be deleted
   */
  
  val deleteOrder = endpoint
      .method(Method.DELETE)
      .in(DeleteOrderInput.endpointInput)
      .out(DeleteOrderOutput.endpointOutput)

  @endpointInput("/store/inventory")
  case class GetInventoryInput (
  )

  object GetInventoryInput{
    val endpointInput: EndpointInput[GetInventoryInput] = EndpointInput.derived
  }

  case class GetInventoryOutput(
    @jsonbody body : Option[Map[String, Int]]=None)
  object GetInventoryOutput{
    val endpointOutput: EndpointOutput[GetInventoryOutput] = EndpointOutput.derived
  }

  /**
   *       Returns a map of status codes to quantities
   * 
   * Expected answers:
   *   code 200 : Map[String, Int] (successful operation)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   */
  
  val getInventory = endpoint
      .method(Method.GET)
      .in(GetInventoryInput.endpointInput)
      .out(GetInventoryOutput.endpointOutput)

  @endpointInput("/store/order/{orderId}")
  case class GetOrderByIdInput (
     @path orderId: Long
  )

  object GetOrderByIdInput{
    val endpointInput: EndpointInput[GetOrderByIdInput] = EndpointInput.derived
  }

  case class GetOrderByIdOutput(
    @jsonbody body : Option[Order]=None,)
  object GetOrderByIdOutput{
    val endpointOutput: EndpointOutput[GetOrderByIdOutput] = EndpointOutput.derived
  }

  /**
   *       For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
   * 
   * Expected answers:
   *   code 200 : Order (successful operation)
   *   code 400 :  (Invalid ID supplied)
   *   code 404 :  (Order not found)
   * 
   * @param orderId ID of pet that needs to be fetched
   */
  
  val getOrderById = endpoint
      .method(Method.GET)
      .in(GetOrderByIdInput.endpointInput)
      .out(GetOrderByIdOutput.endpointOutput)

  @endpointInput("/store/order")
  case class PlaceOrderInput (
     @jsonbody order: Order
  )

  object PlaceOrderInput{
    val endpointInput: EndpointInput[PlaceOrderInput] = EndpointInput.derived
  }

  case class PlaceOrderOutput(
    @jsonbody body : Option[Order]=None,)
  object PlaceOrderOutput{
    val endpointOutput: EndpointOutput[PlaceOrderOutput] = EndpointOutput.derived
  }

  /**
   *       Expected answers:
   *   code 200 : Order (successful operation)
   *   code 400 :  (Invalid Order)
   * 
   * @param order order placed for purchasing the pet
   */
  
  val placeOrder = endpoint
      .method(Method.POST)
      .in(PlaceOrderInput.endpointInput)
      .out(PlaceOrderOutput.endpointOutput)


  def bind[F[_]](t: StoreApi[F], http: Http4sServerInterpreter[F]) =
      List(
        deleteOrder.serverLogic(t.deleteOrder),
        getInventory.serverLogic(t.getInventory),
        getOrderById.serverLogic(t.getOrderById),
        placeOrder.serverLogic(t.placeOrder)
      )
  )

  def stub[F[_], P](url: Option[Uri], interpeter: SttpClientInterpreter, backend: SttpBackend[F, P]): StoreApi[F] = new StoreApi[F]{
    override def deleteOrder(input: DeleteOrderInput): F[Either[Unit,DeleteOrderOutput]] = deleteOrderClient(input)
    override def getInventory(input: GetInventoryInput): F[Either[Unit,GetInventoryOutput]] = getInventoryClient(input)
    override def getOrderById(input: GetOrderByIdInput): F[Either[Unit,GetOrderByIdOutput]] = getOrderByIdClient(input)
    override def placeOrder(input: PlaceOrderInput): F[Either[Unit,PlaceOrderOutput]] = placeOrderClient(input)

    private val deleteOrderClient = interpeter.toClientThrowDecodeFailures(StoreApi.deleteOrder, url, backend)
    private val getInventoryClient = interpeter.toClientThrowDecodeFailures(StoreApi.getInventory, url, backend)
    private val getOrderByIdClient = interpeter.toClientThrowDecodeFailures(StoreApi.getOrderById, url, backend)
    private val placeOrderClient = interpeter.toClientThrowDecodeFailures(StoreApi.placeOrder, url, backend)
  }
}
