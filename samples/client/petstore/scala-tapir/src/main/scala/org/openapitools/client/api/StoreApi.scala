/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.Order
import org.openapitools.client.core.JsonSupport._
import sttp.tapir._
import sttp.tapir.EndpointIO.annotations._
import sttp.model._
import scala.deprecated

object StoreApi {
  val baseUrl: String = "http://petstore.swagger.io/v2"
  /**
   * For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
   * 
   * Expected answers:
   *   code 400 :  (Invalid ID supplied)
   *   code 404 :  (Order not found)
   * 
   * @param orderId ID of the order that needs to be deleted
   */

  @endpointInput("/store/order/{orderId}")
  case class DeleteOrderInput (
     @path orderId: String
  )

  object DeleteOrderInput{
    val endpointInput: EndpointInput[DeleteOrderInput] = EndpointInput.derived
  }

  case class DeleteOrderOutput()
  object DeleteOrderOutput{
    val endpointOutput: EndpointOutput[DeleteOrderOutput] = EndpointOutput.derived
  }

  
  val deleteOrder = endpoint
      .method(Method.DELETE)
      .in(DeleteOrderInput.endpointInput)
      .out(DeleteOrderOutput.endpointOutput)
<!---->
<!--      .errorOut(oneOf[DeleteOrderError](-->
<!--          -->
<!--              oneOfVariant(statusCode(StatusCode(400))),-->
<!--          -->
<!--              oneOfVariant(statusCode(StatusCode(404)))-->
<!--          -->
<!--       ))-->
<!---->
  /**
   * Returns a map of status codes to quantities
   * 
   * Expected answers:
   *   code 200 : Map[String, Int] (successful operation)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   */

  @endpointInput("/store/inventory")
  case class GetInventoryInput (
  )

  object GetInventoryInput{
    val endpointInput: EndpointInput[GetInventoryInput] = EndpointInput.derived
  }

  case class GetInventoryOutput(
    @jsonbody body : Option[Map[String, Int]]=None)
  object GetInventoryOutput{
    val endpointOutput: EndpointOutput[GetInventoryOutput] = EndpointOutput.derived
  }

  
  val getInventory = endpoint
      .method(Method.GET)
      .in(GetInventoryInput.endpointInput)
      .out(GetInventoryOutput.endpointOutput)
<!---->
  /**
   * For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
   * 
   * Expected answers:
   *   code 200 : Order (successful operation)
   *   code 400 :  (Invalid ID supplied)
   *   code 404 :  (Order not found)
   * 
   * @param orderId ID of pet that needs to be fetched
   */

  @endpointInput("/store/order/{orderId}")
  case class GetOrderByIdInput (
     @path orderId: Long
  )

  object GetOrderByIdInput{
    val endpointInput: EndpointInput[GetOrderByIdInput] = EndpointInput.derived
  }

  case class GetOrderByIdOutput(
    @jsonbody body : Option[Order]=None,)
  object GetOrderByIdOutput{
    val endpointOutput: EndpointOutput[GetOrderByIdOutput] = EndpointOutput.derived
  }

  
  val getOrderById = endpoint
      .method(Method.GET)
      .in(GetOrderByIdInput.endpointInput)
      .out(GetOrderByIdOutput.endpointOutput)
<!---->
<!--      .errorOut(oneOf[GetOrderByIdError](-->
<!--          -->
<!--              -->
<!--          -->
<!--              oneOfVariant(statusCode(StatusCode(400))),-->
<!--          -->
<!--              oneOfVariant(statusCode(StatusCode(404)))-->
<!--          -->
<!--       ))-->
<!---->
  /**
   * Expected answers:
   *   code 200 : Order (successful operation)
   *   code 400 :  (Invalid Order)
   * 
   * @param order order placed for purchasing the pet
   */

  @endpointInput("/store/order")
  case class PlaceOrderInput (
     @jsonbody order: Order
  )

  object PlaceOrderInput{
    val endpointInput: EndpointInput[PlaceOrderInput] = EndpointInput.derived
  }

  case class PlaceOrderOutput(
    @jsonbody body : Option[Order]=None,)
  object PlaceOrderOutput{
    val endpointOutput: EndpointOutput[PlaceOrderOutput] = EndpointOutput.derived
  }

  
  val placeOrder = endpoint
      .method(Method.POST)
      .in(PlaceOrderInput.endpointInput)
      .out(PlaceOrderOutput.endpointOutput)
<!---->
<!--      .errorOut(oneOf[PlaceOrderError](-->
<!--          -->
<!--              -->
<!--          -->
<!--              oneOfVariant(statusCode(StatusCode(400)))-->
<!--          -->
<!--       ))-->
<!---->
}
