/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.ApiResponse
import java.io.File
import org.openapitools.client.model.Pet
import org.openapitools.client.core.JsonSupport._
import sttp.tapir._
import sttp.tapir.EndpointIO.annotations._
import sttp.model._

object PetApi {
  val baseUrl: String = "http://petstore.swagger.io/v2"
  /**
   * Expected answers:
   *   code 200 : Pet (successful operation)
   *   code 405 :  (Invalid input)
   * 
   * @param pet Pet object that needs to be added to the store
   */

  @endpointInput("/pet")
  case class AddPetInput (
    @jsonbody pet: Pet,
  )

  object AddPetInput{
    val endpointInput: EndpointInput[AddPetInput] = EndpointInput.derived
  }

  case class AddPetOutput (
    @jsonbody body : Option[Pet],
  )

  object AddPetOutput{
    val endpointOutput: EndpointOutput[AddPetOutput] = EndpointOutput.derived
  }

  val addPet = endpoint
      .method(Method.POST)
      .in(AddPetInput.endpointInput)
      .out(AddPetOutput.endpointOutput)

  /**
   * Expected answers:
   *   code 400 :  (Invalid pet value)
   * 
   * @param petId Pet id to delete
   * @param apiKey 
   */

  @endpointInput("/pet/{petId}")
  case class DeletePetInput (
    @path petId: Long,
    @header apiKey: Option[String],
  )

  object DeletePetInput{
    val endpointInput: EndpointInput[DeletePetInput] = EndpointInput.derived
  }


  object DeletePetOutput{
    val endpointOutput: EndpointOutput[DeletePetOutput] = EndpointOutput.derived
  }

  val deletePet = endpoint
      .method(Method.DELETE)
      .in(DeletePetInput.endpointInput)
      .out(DeletePetOutput.endpointOutput)

  /**
   * Multiple status values can be provided with comma separated strings
   * 
   * Expected answers:
   *   code 200 : Seq[Pet] (successful operation)
   *   code 400 :  (Invalid status value)
   * 
   * @param status Status values that need to be considered for filter
   */

  @endpointInput("/pet/findByStatus")
  case class FindPetsByStatusInput (
    @query status: Seq[String],
  )

  object FindPetsByStatusInput{
    val endpointInput: EndpointInput[FindPetsByStatusInput] = EndpointInput.derived
  }

  case class FindPetsByStatusOutput (
    @jsonbody body : Option[Seq[Pet]],
  )

  object FindPetsByStatusOutput{
    val endpointOutput: EndpointOutput[FindPetsByStatusOutput] = EndpointOutput.derived
  }

  val findPetsByStatus = endpoint
      .method(Method.GET)
      .in(FindPetsByStatusInput.endpointInput)
      .out(FindPetsByStatusOutput.endpointOutput)

  /**
   * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
   * 
   * Expected answers:
   *   code 200 : Seq[Pet] (successful operation)
   *   code 400 :  (Invalid tag value)
   * 
   * @param tags Tags to filter by
   */

  @endpointInput("/pet/findByTags")
  case class FindPetsByTagsInput (
    @query tags: Seq[String],
  )

  object FindPetsByTagsInput{
    val endpointInput: EndpointInput[FindPetsByTagsInput] = EndpointInput.derived
  }

  case class FindPetsByTagsOutput (
    @jsonbody body : Option[Seq[Pet]],
  )

  object FindPetsByTagsOutput{
    val endpointOutput: EndpointOutput[FindPetsByTagsOutput] = EndpointOutput.derived
  }

  val findPetsByTags = endpoint
      .method(Method.GET)
      .in(FindPetsByTagsInput.endpointInput)
      .out(FindPetsByTagsOutput.endpointOutput)

  /**
   * Returns a single pet
   * 
   * Expected answers:
   *   code 200 : Pet (successful operation)
   *   code 400 :  (Invalid ID supplied)
   *   code 404 :  (Pet not found)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param petId ID of pet to return
   */

  @endpointInput("/pet/{petId}")
  case class GetPetByIdInput (
    @path petId: Long,
  )

  object GetPetByIdInput{
    val endpointInput: EndpointInput[GetPetByIdInput] = EndpointInput.derived
  }

  case class GetPetByIdOutput (
    @jsonbody body : Option[Pet],
  )

  object GetPetByIdOutput{
    val endpointOutput: EndpointOutput[GetPetByIdOutput] = EndpointOutput.derived
  }

  val getPetById = endpoint
      .method(Method.GET)
      .in(GetPetByIdInput.endpointInput)
      .out(GetPetByIdOutput.endpointOutput)

  /**
   * Expected answers:
   *   code 200 : Pet (successful operation)
   *   code 400 :  (Invalid ID supplied)
   *   code 404 :  (Pet not found)
   *   code 405 :  (Validation exception)
   * 
   * @param pet Pet object that needs to be added to the store
   */

  @endpointInput("/pet")
  case class UpdatePetInput (
    @jsonbody pet: Pet,
  )

  object UpdatePetInput{
    val endpointInput: EndpointInput[UpdatePetInput] = EndpointInput.derived
  }

  case class UpdatePetOutput (
    @jsonbody body : Option[Pet],
  )

  object UpdatePetOutput{
    val endpointOutput: EndpointOutput[UpdatePetOutput] = EndpointOutput.derived
  }

  val updatePet = endpoint
      .method(Method.PUT)
      .in(UpdatePetInput.endpointInput)
      .out(UpdatePetOutput.endpointOutput)

  /**
   * Expected answers:
   *   code 405 :  (Invalid input)
   * 
   * @param petId ID of pet that needs to be updated
   * @param name Updated name of the pet
   * @param status Updated status of the pet
   */

  @endpointInput("/pet/{petId}")
  case class UpdatePetWithFormInput (
    @path petId: Long,
  )

  object UpdatePetWithFormInput{
    val endpointInput: EndpointInput[UpdatePetWithFormInput] = EndpointInput.derived
  }


  object UpdatePetWithFormOutput{
    val endpointOutput: EndpointOutput[UpdatePetWithFormOutput] = EndpointOutput.derived
  }

  val updatePetWithForm = endpoint
      .method(Method.POST)
      .in(UpdatePetWithFormInput.endpointInput)
      .out(UpdatePetWithFormOutput.endpointOutput)

  /**
   * Expected answers:
   *   code 200 : ApiResponse (successful operation)
   * 
   * @param petId ID of pet to update
   * @param additionalMetadata Additional data to pass to server
   * @param file file to upload
   */

  @endpointInput("/pet/{petId}/uploadImage")
  case class UploadFileInput (
    @path petId: Long,
  )

  object UploadFileInput{
    val endpointInput: EndpointInput[UploadFileInput] = EndpointInput.derived
  }

  case class UploadFileOutput (
    @jsonbody body : Option[ApiResponse],
  )

  object UploadFileOutput{
    val endpointOutput: EndpointOutput[UploadFileOutput] = EndpointOutput.derived
  }

  val uploadFile = endpoint
      .method(Method.POST)
      .in(UploadFileInput.endpointInput)
      .out(UploadFileOutput.endpointOutput)

}
