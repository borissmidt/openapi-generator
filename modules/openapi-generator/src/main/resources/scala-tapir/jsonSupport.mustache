{{>licenseInfo}}
package {{invokerPackage}}

{{#models.0}}
import {{modelPackage}}._
{{/models.0}}
{{#json4s}}
import org.json4s._
import sttp.tapir.json.json4s.TapirJson4s
import scala.reflect.ClassTag

object JsonSupport extends TapirJson4s with DateSerializers{
  def enumSerializers: Seq[Serializer[_]] = Seq[Serializer[_]](){{#models}}{{#model}}{{#hasEnums}}{{#vars}}{{#isEnum}} :+
    new EnumNameSerializer({{classname}}Enums.{{datatypeWithEnum}}){{/isEnum}}{{/vars}}{{/hasEnums}}{{/model}}{{/models}}

  private class EnumNameSerializer[E <: Enumeration: ClassTag](enum: E) extends Serializer[E#Value] {
    import JsonDSL._
    val EnumerationClass: Class[E#Value] = classOf[E#Value]

    def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), E#Value] = {
      case (t @ TypeInfo(EnumerationClass, _), json) if isValid(json) =>
        json match {
          case JString(value) => enum.withName(value)
          case value => throw new MappingException(s"Can't convert $value to $EnumerationClass")
        }
    }

    private[this] def isValid(json: JValue) = json match {
      case JString(value) if enum.values.exists(_.toString == value) => true
      case _ => false
    }

    def serialize(implicit format: Formats): PartialFunction[Any, JValue] = {
      case i: E#Value => i.toString
      }
    }

  implicit val format: Formats = DefaultFormats ++ enumSerializers ++ DateSerializers.all
  implicit val serialization: org.json4s.Serialization = org.json4s.jackson.Serialization
}
{{/json4s}}

{{#circe}}
import io.circe.Codec
import io.circe.generic.AutoDerivation
import sttp.tapir.json.circe.TapirJsonCirce
import sttp.tapir.Schema
import sttp.tapir.SchemaType.SString

object JsonSupport extends AutoDerivation with DateSerializers with TapirJsonCirce {
  implicit def schemEnumeration[T <: Enumeration#Value]: Schema[T] = Schema(SString())
{{#models}}{{#model}}{{#hasEnums}}{{#vars}}{{#isEnum}}
  implicit val {{classname}}{{datatypeWithEnum}}Decoder: Codec[{{classname}}Enums.{{datatypeWithEnum}}] = Codec.codecForEnumeration({{classname}}Enums.{{datatypeWithEnum}})
{{/isEnum}}{{/vars}}{{/hasEnums}}{{/model}}{{/models}}
}
{{/circe}}
